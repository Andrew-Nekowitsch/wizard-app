/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorldRouteImport } from './routes/world'
import { Route as TournamentRouteImport } from './routes/tournament'
import { Route as StudyRouteImport } from './routes/study'
import { Route as SpellbookRouteImport } from './routes/spellbook'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DuelsRouteImport } from './routes/duels'
import { Route as AccountRouteImport } from './routes/account'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const WorldRoute = WorldRouteImport.update({
  id: '/world',
  path: '/world',
  getParentRoute: () => rootRouteImport,
} as any)
const TournamentRoute = TournamentRouteImport.update({
  id: '/tournament',
  path: '/tournament',
  getParentRoute: () => rootRouteImport,
} as any)
const StudyRoute = StudyRouteImport.update({
  id: '/study',
  path: '/study',
  getParentRoute: () => rootRouteImport,
} as any)
const SpellbookRoute = SpellbookRouteImport.update({
  id: '/spellbook',
  path: '/spellbook',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DuelsRoute = DuelsRouteImport.update({
  id: '/duels',
  path: '/duels',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRoute = AccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/account': typeof AccountRoute
  '/duels': typeof DuelsRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/spellbook': typeof SpellbookRoute
  '/study': typeof StudyRoute
  '/tournament': typeof TournamentRoute
  '/world': typeof WorldRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/account': typeof AccountRoute
  '/duels': typeof DuelsRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/spellbook': typeof SpellbookRoute
  '/study': typeof StudyRoute
  '/tournament': typeof TournamentRoute
  '/world': typeof WorldRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/account': typeof AccountRoute
  '/duels': typeof DuelsRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/spellbook': typeof SpellbookRoute
  '/study': typeof StudyRoute
  '/tournament': typeof TournamentRoute
  '/world': typeof WorldRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/account'
    | '/duels'
    | '/login'
    | '/register'
    | '/spellbook'
    | '/study'
    | '/tournament'
    | '/world'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/account'
    | '/duels'
    | '/login'
    | '/register'
    | '/spellbook'
    | '/study'
    | '/tournament'
    | '/world'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/account'
    | '/duels'
    | '/login'
    | '/register'
    | '/spellbook'
    | '/study'
    | '/tournament'
    | '/world'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AccountRoute: typeof AccountRoute
  DuelsRoute: typeof DuelsRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  SpellbookRoute: typeof SpellbookRoute
  StudyRoute: typeof StudyRoute
  TournamentRoute: typeof TournamentRoute
  WorldRoute: typeof WorldRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/world': {
      id: '/world'
      path: '/world'
      fullPath: '/world'
      preLoaderRoute: typeof WorldRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tournament': {
      id: '/tournament'
      path: '/tournament'
      fullPath: '/tournament'
      preLoaderRoute: typeof TournamentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/study': {
      id: '/study'
      path: '/study'
      fullPath: '/study'
      preLoaderRoute: typeof StudyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/spellbook': {
      id: '/spellbook'
      path: '/spellbook'
      fullPath: '/spellbook'
      preLoaderRoute: typeof SpellbookRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/duels': {
      id: '/duels'
      path: '/duels'
      fullPath: '/duels'
      preLoaderRoute: typeof DuelsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AccountRoute: AccountRoute,
  DuelsRoute: DuelsRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  SpellbookRoute: SpellbookRoute,
  StudyRoute: StudyRoute,
  TournamentRoute: TournamentRoute,
  WorldRoute: WorldRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
